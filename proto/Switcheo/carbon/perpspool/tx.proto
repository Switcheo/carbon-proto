syntax = "proto3";
package Switcheo.carbon.perpspool;

import "gogoproto/gogo.proto";
import "Switcheo/carbon/perpspool/pool.proto";
import "Switcheo/carbon/perpspool/market.proto";
import "Switcheo/carbon/perpspool/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/perpspool/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);
  rpc UpdatePool(MsgUpdatePool) returns (MsgUpdatePoolResponse);
  rpc RegisterToPool(MsgRegisterToPool) returns (MsgRegisterToPoolResponse);
  rpc DeregisterFromPool(MsgDeregisterFromPool)
      returns (MsgDeregisterFromPoolResponse);
  rpc DepositToPool(MsgDepositToPool) returns (MsgDepositToPoolResponse);
  rpc WithdrawFromPool(MsgWithdrawFromPool)
      returns (MsgWithdrawFromPoolResponse);
  rpc UpdateMarketConfig(MsgUpdateMarketConfig)
      returns (MsgUpdateMarketConfigResponse);
  // UpdateParams defines a governance operation for updating the module
  // parameters. The authority is hard-coded to the x/gov module account.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/CreatePool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // name of pool
  string name = 2;
  // denom of the nav token in the pool that is used to provide liquidity
  string deposit_denom = 3;
  // the maximum amount that can be supplied into the pool
  string supply_cap = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // deposit fee to charge on a successful deposit to pool in decimal
  string deposit_fee = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // withdrawal fee to charge on a successful withdrawal from pool in decimal
  string withdrawal_fee = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // borrow fee in decimal per time period to charge on use of liquidity in pool
  string base_borrow_fee_per_funding_interval = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"borrow_fee_dec\""
  ];
}

message MsgCreatePoolResponse {
  Pool pool = 1 [ (gogoproto.nullable) = false ];
}

message MsgUpdatePool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/UpdatePool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 pool_id = 2;
  UpdatePoolParams update_pool_params = 3 [ (gogoproto.nullable) = false ];
}

message MsgUpdatePoolResponse {
  Pool pool = 1 [ (gogoproto.nullable) = false ];
}

message MsgRegisterToPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/RegisterToPool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 pool_id = 2;
  string market_id = 3;
  UpdateMarketConfigParams market_config_params = 4;
}

message MsgRegisterToPoolResponse {}

message MsgDeregisterFromPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/DeregisterToPool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string market_id = 2;
}

message MsgDeregisterFromPoolResponse {}

message MsgDepositToPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/DepositToPool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 pool_id = 2;
  string deposit_amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ]; // the amount to deposit
  string min_share_amount = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ]; // min amount of share to receive
}

message MsgDepositToPoolResponse {}

message MsgWithdrawFromPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/WithdrawToPool";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 pool_id = 2;
  string share_amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ]; // the amount of share to use for withdrawal
  string min_receive_amount = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ]; // min amount to receive
}

message MsgWithdrawFromPoolResponse {}

message MsgUpdateMarketConfig {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "perpspool/UpdateMarketConfig";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string market_id = 2;
  UpdateMarketConfigParams update_market_config_params = 3
      [ (gogoproto.nullable) = false ];
}

message MsgUpdateMarketConfigResponse {
  MarketConfig market_config = 1 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "perpspool/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the optional parameters to update.
  ParamsToUpdate params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// this line is used by starport scaffolding # proto/tx/message
