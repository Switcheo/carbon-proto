syntax = "proto3";
package Switcheo.carbon.perpspool;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/wrappers.proto";
import "Switcheo/carbon/perpspool/market.proto";

option go_package = "github.com/Switcheo/carbon/x/perpspool/types";
option (gogoproto.goproto_getters_all) = false;

import "google/protobuf/timestamp.proto";

// main store holding each Pool
message Pool {
  // auto-incrementing id
  uint64 id = 1;

  // admin/govt determined name
  string name = 2;

  // deposit_denom for nav token that will be used to provide liquidity
  string deposit_denom = 3;

  // auto-generated denom for the share token that can be used to redeem
  // deposited token
  string share_denom = 4;

  // auto-created address of the vault that stores the tokens
  string vault_address = 5;

  // supply cap to limit amount of tokens that can go into the pool
  string supply_cap = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // deposit fee to charge on a successful deposit to pool in decimal
  string deposit_fee = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // withdrawal fee to charge on a successful withdrawal from pool in decimal
  string withdrawal_fee = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // borrow fee in decimal per time period to charge on use of liquidity in pool
  string base_borrow_fee_per_funding_interval = 9 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message UpdatePoolParams {
  google.protobuf.StringValue name = 1 [ (gogoproto.wktpointer) = true ];
  string supply_cap = 2 [ (gogoproto.customtype) = "cosmossdk.io/math.Int" ];
  string deposit_fee = 3
      [ (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec" ];
  string withdrawal_fee = 4
      [ (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec" ];
  string base_borrow_fee_per_funding_interval = 5
      [ (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec" ];
}

// PoolDetails used for for querying. same as Pool but appended with
// registered_markets
message PoolDetails {
  Pool pool = 1 [ (gogoproto.nullable) = false ];
  repeated MarketConfig registered_markets = 2 [ (gogoproto.nullable) = false ];
}

// DepositParams params required for enqueuing into deposit transient store
message DepositToPoolParams {
  uint64 pool_id = 1;
  string from_account = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string deposit_amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string min_shares_to_receive = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  uint64 processing_id = 5;
}

// WithdrawParams params required for enqueuing into withdraw transient store
message WithdrawFromPoolParams {
  uint64 pool_id = 1;
  string to_account = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string share_amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string min_withdraw_amount = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  uint64 processing_id = 5;
}

message NavPerShareLastRecorded {
  google.protobuf.Timestamp last_recorded_at = 1
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}
