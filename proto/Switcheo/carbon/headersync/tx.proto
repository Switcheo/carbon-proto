syntax = "proto3";
package Switcheo.carbon.headersync;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/headersync/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc SyncGenesis(MsgSyncGenesis) returns (MsgSyncGenesisResponse);
  rpc SyncHeaders(MsgSyncHeaders) returns (MsgSyncHeadersResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgSyncGenesis {
  option (cosmos.msg.v1.signer) = "syncer";
  option (amino.name) = "headersync/SyncGenesis";
  option (gogoproto.goproto_getters) = false;

  string syncer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string genesis_header = 2;
}

message MsgSyncGenesisResponse {}

message MsgSyncHeaders {
  option (cosmos.msg.v1.signer) = "syncer";
  option (amino.name) = "headersync/SyncHeaders";
  option (gogoproto.goproto_getters) = false;

  string syncer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated string headers = 2;
}

message MsgSyncHeadersResponse {}
