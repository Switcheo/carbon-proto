syntax = "proto3";
package Switcheo.carbon.insurance;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "Switcheo/carbon/insurance/params.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/insurance/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc TopUpInsurance(MsgTopUpInsurance) returns (MsgTopUpInsuranceResponse);

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgTopUpInsurance {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "insurance/TopUpInsurance";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string market_id = 2;
  string amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string denom = 4;
}

message MsgTopUpInsuranceResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "insurance/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the optional parameters to update.
  ParamsToUpdate params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}