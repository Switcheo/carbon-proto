syntax = "proto3";
package Switcheo.carbon.subaccount;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1
import "google/protobuf/duration.proto";
import "Switcheo/carbon/subaccount/subaccount.proto";
import "Switcheo/carbon/subaccount/params.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/Switcheo/carbon/x/subaccount/types";
option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // this line is used by starport scaffolding # 2

  // Get subaccount details
  rpc SubAccount(QueryGetSubAccountRequest)
      returns (QueryGetSubAccountResponse) {
    option (google.api.http).get =
        "/carbon/subaccount/v1/subaccounts/{address}/{role}";
  }

  // Get pending subaccount details
  rpc PendingSubAccount(QueryGetPendingSubAccountRequest)
      returns (QueryGetSubAccountResponse) {
    option (google.api.http).get =
        "/carbon/subaccount/v1/subaccounts/{main_address}/{sub_address}/{role}";
  }

  // Get all subaccount details
  rpc SubAccountAll(QueryAllSubAccountRequest)
      returns (QueryAllSubAccountResponse) {
    option (google.api.http).get = "/carbon/subaccount/v1/subaccounts";
  }

  // Get pending subaccounts
  rpc PendingSubAccountAll(QueryAllPendingSubAccountRequest)
      returns (QueryAllPendingSubAccountResponse) {
    option (google.api.http).get = "/carbon/subaccount/v1/subaccounts/pending";
  }

  // Get voting power for a subaccount address
  rpc SubAccountPower(QuerySubAccountPowerRequest)
      returns (QuerySubAccountPowerResponse) {
    option (google.api.http).get = "/carbon/subaccount/v1/power/{address}";
  }

  // Get all main accounts based on sub account
  rpc MainAccountAll(QueryMainAccountAllRequest)
      returns (QueryMainAccountAllResponse) {
    option (google.api.http).get =
        "/carbon/subaccount/v1/mainaccount/{sub_address}";
  }

  // Get main account based on sub account and role
  rpc MainAccount(QueryMainAccountRequest) returns (QueryMainAccountResponse) {
    option (google.api.http).get =
        "/carbon/subaccount/v1/mainaccount/{sub_address}/{role}";
  }

  // Parameters queries the subaccount parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/carbon/subaccount/v1/params";
  }

  // Cooldown queries the subaccount cooldown duration.
  rpc Cooldown(QueryCreationCooldownRequest)
      returns (QueryCreationCooldownResponse) {
    option (google.api.http).get =
        "/carbon/subaccount/v1/creation_cooldown/{address}/{role}";
  }
}

// this line is used by starport scaffolding # 3
message QueryGetSubAccountRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string role = 2;
}

message QueryGetPendingSubAccountRequest {
  string main_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string sub_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string role = 3;
}

message QueryGetSubAccountResponse {
  SubAccount subaccount = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllSubAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string main_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  google.protobuf.StringValue role = 3 [ (gogoproto.wktpointer) = true ];
}

message QueryAllSubAccountResponse {
  repeated SubAccount subaccounts = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllPendingSubAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string main_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string role = 3;
  string sub_address = 4 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryAllPendingSubAccountResponse {
  repeated SubAccount subaccounts = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySubAccountPowerRequest { string address = 1; }

message QuerySubAccountPowerResponse {
  string power = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryMainAccountAllRequest { string sub_address = 1; }

message QueryMainAccountAllResponse {
  repeated MainAccount main_accounts = 1 [ (gogoproto.nullable) = false ];
  ;
}

message QueryMainAccountRequest {
  string sub_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string role = 2;
}

message QueryMainAccountResponse {
  MainAccount main_account = 1 [ (gogoproto.nullable) = false ];
  ;
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryCreationCooldownRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string role = 2;
}

message QueryCreationCooldownResponse {
  google.protobuf.Duration cooldown_duration = 1
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];
}