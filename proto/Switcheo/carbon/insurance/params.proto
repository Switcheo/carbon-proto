syntax = "proto3";
package Switcheo.carbon.insurance;

option go_package = "github.com/Switcheo/carbon/x/insurance/types";
option (gogoproto.goproto_getters_all) = false;

import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/wrappers.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

message Params {
  option (gogoproto.goproto_stringer) = false;
  repeated cosmos.base.v1beta1.Coin min_market_liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  // utilization_interval specifies the duration after which a market's
  // insurance fund usage will be reset.
  google.protobuf.Duration utilization_interval = 2
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];
  // percentage of the total insurance fund that can be used per interval
  string max_utilization_ratio = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message ParamsToUpdate {
  repeated cosmos.base.v1beta1.Coin min_market_liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  google.protobuf.Duration utilization_interval = 2
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = true ];
  string max_utilization_ratio = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];
}
