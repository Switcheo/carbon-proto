syntax = "proto3";
package Switcheo.carbon.otc;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "Switcheo/carbon/otc/params.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/otc/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  rpc CreateRfq(MsgCreateRfq) returns (MsgCreateRfqResponse);
  rpc CancelRfq(MsgCancelRfq) returns (MsgCancelRfqResponse);
  rpc CreateQuote(MsgCreateQuote) returns (MsgCreateQuoteResponse);
  rpc AcceptQuote(MsgAcceptQuote) returns (MsgAcceptQuoteResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // this line is used by starport scaffolding # proto/tx/rpc
}

// this line is used by starport scaffolding # proto/tx/message
message MsgCreateRfq {
  option (cosmos.msg.v1.signer) = "requester";
  option (amino.name) = "otc/CreateRfq";

  string requester = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated cosmos.base.v1beta1.Coin sell_coins = 2
      [ (gogoproto.nullable) = false ];
  string buy_denom = 3;
  google.protobuf.Timestamp expiry_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (cosmos_proto.scalar) = "google.protobuf.Timestamp"
  ];
}

message MsgCreateRfqResponse {}

message MsgCancelRfq {
  option (cosmos.msg.v1.signer) = "requester";
  option (amino.name) = "otc/CancelRfq";

  string requester = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string id = 2;
}

message MsgCancelRfqResponse {}

message MsgCreateQuote {
  option (cosmos.msg.v1.signer) = "quoter";
  option (amino.name) = "otc/CreateQuote";

  string quoter = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string rfq_id = 2;
  string quantity = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp expiry_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (cosmos_proto.scalar) = "google.protobuf.Timestamp"
  ];
}

message MsgCreateQuoteResponse {}

message MsgAcceptQuote {
  option (cosmos.msg.v1.signer) = "requester";
  option (amino.name) = "otc/AcceptQuote";

  string requester = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string id = 2;
}

message MsgAcceptQuoteResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "otc/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the optional parameters to update.
  ParamsToUpdate params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}
