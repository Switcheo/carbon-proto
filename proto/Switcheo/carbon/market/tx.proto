syntax = "proto3";
package Switcheo.carbon.market;

import "Switcheo/carbon/market/fee.proto";
import "Switcheo/carbon/market/market.proto";
import "Switcheo/carbon/market/params.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "amino/amino.proto";

option go_package = "github.com/Switcheo/carbon/x/market/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc CreateMarket(MsgCreateMarket) returns (MsgCreateMarketResponse);
  rpc UpdateMarket(MsgUpdateMarket) returns (MsgUpdateMarketResponse);

  rpc UpdatePerpetualsFundingInterval(MsgUpdatePerpetualsFundingInterval)
      returns (MsgUpdatePerpetualsFundingIntervalResponse);

  rpc DisableSpotMarket(MsgDisableSpotMarket)
      returns (MsgDisableSpotMarketResponse);

  rpc AddFeeTier(MsgAddFeeTier) returns (MsgAddFeeTierResponse);
  rpc UpdateFeeTier(MsgUpdateFeeTier) returns (MsgUpdateFeeTierResponse);
  rpc RemoveFeeTier(MsgRemoveFeeTier) returns (MsgRemoveFeeTierResponse);

  rpc SetStakeEquivalence(MsgSetStakeEquivalence)
      returns (MsgSetStakeEquivalenceResponse);

  rpc HandleUpdateAllPoolTradingFees(MsgUpdateAllPoolTradingFees)
      returns (MsgUpdateAllPoolTradingFeesResponse);
  rpc UpdateFeeStructure(MsgUpdateFeeStructure)
      returns (MsgUpdateFeeStructureResponse);
  rpc DeleteFeeStructure(MsgDeleteFeeStructure)
      returns (MsgDeleteFeeStructureResponse);

  // UpdateParams defines a governance operation for updating the module
  // parameters. The authority is hard-coded to the x/gov module account.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgDisableSpotMarket {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/DisableSpotMarket";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string market_id = 2;
}

message MsgDisableSpotMarketResponse {}

// this line is used by starport scaffolding # proto/tx/message
message MsgCreateMarket {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/CreateMarket";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  reserved 2; // Used to be Market but deprecated to use params below
  string market_type = 3;
  string base = 4;
  string quote = 5;
  string current_base_price_usd = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string current_quote_price_usd = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // futures only
  string index_oracle_id = 10;
  google.protobuf.Timestamp expiry_time = 11
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

message MsgCreateMarketResponse { string id = 1; }

message MsgUpdateMarket {
  option (cosmos.msg.v1.signer) = "updater";
  option (amino.name) = "market/UpdateMarket";

  string updater = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  MarketParams market_params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateMarketResponse {}

message MsgUpdatePerpetualsFundingInterval {
  option (cosmos.msg.v1.signer) = "updater";
  option (amino.name) = "market/UpdatePerpetualsFundingInterval";

  string updater = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  google.protobuf.Duration perpetuals_funding_interval = 2
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = false ];
}

message MsgUpdatePerpetualsFundingIntervalResponse {}

message MsgAddFeeTier {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/AddFeeTier";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  FeeCategory fee_category = 2 [ (gogoproto.nullable) = false ];
  FeeTier fee_tier = 3 [ (gogoproto.nullable) = false ];
}

message MsgAddFeeTierResponse {
  repeated FeeTier fee_tiers = 1 [ (gogoproto.nullable) = false ];
}

message MsgUpdateFeeTier {
  option (cosmos.msg.v1.signer) = "updater";
  option (amino.name) = "market/UpdateFeeTier";

  string updater = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  FeeCategory fee_category = 2 [ (gogoproto.nullable) = false ];
  string required_stake = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string taker_fee = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];
  string maker_fee = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];
}

message MsgUpdateFeeTierResponse {
  repeated FeeTier fee_tiers = 1 [ (gogoproto.nullable) = false ];
}

message MsgRemoveFeeTier {
  option (cosmos.msg.v1.signer) = "remover";
  option (amino.name) = "market/RemoveFeeTier";

  string remover = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  FeeCategory fee_category = 2 [ (gogoproto.nullable) = false ];
  string required_stake = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgRemoveFeeTierResponse {
  repeated FeeTier fee_tiers = 1 [ (gogoproto.nullable) = false ];
}

message MsgSetStakeEquivalence {
  option (cosmos.msg.v1.signer) = "setter";
  option (amino.name) = "market/SetStakeEquivalence";

  string setter = 1;
  StakeEquivalence stake_equivalence = 2 [ (gogoproto.nullable) = false ];
}

message MsgSetStakeEquivalenceResponse {
  repeated StakeEquivalence stake_equivalences = 1
      [ (gogoproto.nullable) = false ];
}

message MsgUpdateAllPoolTradingFees {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/UpdateAllPoolTradingFees";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  UpdateAllPoolTradingFeesParams update_pool_trading_fees_params = 2
      [ (gogoproto.nullable) = false ];
}

message MsgUpdateAllPoolTradingFeesResponse {}

message UpdateAllPoolTradingFeesParams {
  string market_type = 1;
  string maker_fee = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string taker_fee = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "market/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the optional parameters to update.
  ParamsToUpdate params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

message MsgUpdateFeeStructure {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/UpdateFeeStructure";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  FeeCategory fee_category = 2 [ (gogoproto.nullable) = false ];
  repeated FeeTier fee_tiers = 3 [ (gogoproto.nullable) = false ];
}

message MsgUpdateFeeStructureResponse {
  FeeStructure fee_structure = 1 [ (gogoproto.nullable) = false ];
}

message MsgDeleteFeeStructure {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "market/DeleteFeeStructure";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  FeeCategory fee_category = 2 [ (gogoproto.nullable) = false ];
}

message MsgDeleteFeeStructureResponse {}
